import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { DndContext } from "@dnd-kit/core";
import { Draggable } from "../../components/Form/Dragabble";
import { useEffect, useMemo, useState } from "react";
import { Droppable } from "../../components/Form/Droppable";
import Main from "../../components/UI/Layout/Main";
import { useRouter } from "next/router";

export type FieldValue = {
  id: string;
  label: string;
}

const Form: NextPage = () => {
  const router = useRouter();
  const formId = router.query.formid as string;

  const formQuery = trpc.forms.get.useQuery(formId, {enabled: Boolean(formId)});
  const formCreateMutation = trpc.forms.createForm.useMutation();
  const formUpdateMutation = trpc.forms.updateForm.useMutation();
  
  const [fields, setFields] = useState<FieldValue[]>([]);
  const [draggableValue, setDraggableValue] = useState<string>('');
  const [name, setName] = useState<string>('')

  const handleDragEnd = (event) => {
    if (event.over && event.over.id === "droppable") {
      const randomId = `${draggableValue}.${Math.random()}`;
      setFields(prev => [...prev, {id: randomId, label: draggableValue}])
      setDraggableValue('');
    }
  };

  const DisplayFields = useMemo(()=> {
    const updateLabel = (id : number | string, inputText : string) => {
      const newFields = fields.map(field => {
        if(field.id===id){
            const newField = {...field, label: inputText}
            return newField;
        }
        return field;
      })
  
      setFields(newFields)
    }
    
    const allFields = [...(formQuery.data?.fields ?? []), ...fields];

    return allFields.map(field => {
      return (
        <div key={field.id} className="flex flex-col gap-1 w-96">
          <input value={field.label} onChange={e => updateLabel(field.id, e.target.value)}></input>
          <input disabled className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-96 p-2.5"></input>
        </div>
      )
    })
  }, [formQuery.data, fields]);

  const onFormSaveClick = async () => {
    if (!formQuery.isFetched) {
      return;
    }

    if (formQuery.data) {
      formUpdateMutation.mutate({id: formId, newFields: fields});
    } else {
      const data = await formCreateMutation.mutateAsync({fields, name});
      const newId = data.id;
      router.replace(`/form/${newId}`);
      setFields([]);
    }
  };

  if (formQuery.isLoading) {
    return <div>loading....</div>;
  }

  return (
    <>
      <Head>
        <title>Clrty Edit Form</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        {formQuery.data ? <h2>{formQuery.data.name}</h2> : <h2>Form name: <input value={name} onChange={e => setName(e.target.value)} type="text" className="mt-5 border border-gray-300"/></h2>}
        <div className="flex justify-end">
          <button className="p-3 w-50 hover:text-tahiti" onClick={onFormSaveClick}>Save Form</button>
        </div>
      <div className="flex">
        <DndContext onDragEnd={handleDragEnd}>
          <div className="h-96 w-96 flex-none">
          <Draggable><div><label>Field Name: </label><input value={draggableValue} onChange={e => setDraggableValue(e.target.value)} type="text" className="border border-gray-300"/></div></Draggable>
          </div>
          <div className="flex-1">
            <Droppable className="h-full rounded-lg border-2 border-dashed border-gray-200 flex flex-col gap-3 w-full">
              {DisplayFields}
              <div>Drop new field here</div>
            </Droppable>
          </div>
        </DndContext>
      </div>
      </Main>
    </>
  );
};

export default Form;
