// forms page
import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import Single from "../components/UI/Layout/Single";
import examples from "./api/examples";
import { getSession } from "next-auth/react";
import Main from "../components/UI/Layout/Main";
import Link from "next/link";
import router from "next/router";

export type Form = {
  id: number | string
}

const Forms: NextPage = () => {
  const forms = trpc.forms.getAll.useQuery();
  const formDeleteMutation = trpc.forms.delete.useMutation();
  
  const deleteForm = async (formId : string) => {
    await formDeleteMutation.mutateAsync(formId);
    forms.refetch();
  }

  return (
    <>
      <Head>
        <title>Clrty New Forms</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <Single title="Forms">

        <Link href='form/0'>
          Create New Form
        </Link>

        {
          forms.isFetching ?
            <div>loading...</div> :
            <table>
              <thead>
                <tr>
                  <th>Form name</th>
                  <th>Form ID</th>
                  <th>Number of fields</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {
                  forms.data && forms.data.map((form) => (
                    <tr key={form.id}>
                      <td>{form.name}</td>
                      <td>{form.id}</td>
                      <td>{form.fields.length}</td>
                      <td>
                        <Link href={`form/${form.id}`}>
                          Edit
                        </Link>
                        <button onClick={() => deleteForm(form.id)}>
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))
                }
              </tbody>
            </table> 
        }
        </Single>
      </Main>
    </>
  );
};

export async function getServerSideProps(context: any) {
  const session = await getSession(context);
  console.log({ session });

  if (!session) {
    return {
      redirect: {
        destination: "/login",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}

export default Forms;
